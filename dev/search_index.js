var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API","title":"API Reference","text":"","category":"section"},{"location":"api/#Simulation","page":"API","title":"Simulation","text":"","category":"section"},{"location":"api/#SimulationAnalysis.SingleComponentSimulation","page":"API","title":"SimulationAnalysis.SingleComponentSimulation","text":"SingleComponentSimulation\n\nA struct to hold the data of a single-component simulation.\n\nFields\n\nN::Int64: Number of particles.\nNdims::Int64: Number of dimensions.\nr_array::Array{Float64, 3}: Particle positions.\nv_array::Array{Float64, 3}: Particle velocities.\nF_array::Array{Float64, 3}: Particle forces.\nD_array::Array{Float64, 1}: Diffusion coefficient.\nt_array::Array{Float64, 1}: Time steps.\nbox_sizes::Vector{Float64}: Box sizes.\ndt_array::Array{Int64, 1}: Time step differences.\nt1_t2_pair_array::Vector{Array{Int64, 2}}: Time pairs.\nfilepath::String: Path to the simulation file.\n\n\n\n\n\n","category":"type"},{"location":"api/#SimulationAnalysis.MultiComponentSimulation","page":"API","title":"SimulationAnalysis.MultiComponentSimulation","text":"MultiComponentSimulation\n\nA struct to hold the data of a multi-component simulation.\n\nFields\n\nN::Int64: Total number of particles.\nNdims::Int64: Number of dimensions.\nN_species::Int64: Number of species.\nN_particles_per_species::Vector{Int}: Number of particles per species.\nr_array::Vector{Array{Float64, 3}}: Particle positions for each species.\nv_array::Vector{Array{Float64, 3}}: Particle velocities for each species.\nF_array::Vector{Array{Float64, 3}}: Particle forces for each species.\nt_array::Vector{Float64}: Time steps.\nbox_sizes::Vector{Float64}: Box sizes.\ndt_array::Vector{Int}: Time step differences.\nt1_t2_pair_array::Vector{Array{Int64, 2}}: Time pairs.\nfilepath::String: Path to the simulation file.\n\n\n\n\n\n","category":"type"},{"location":"api/#Load-Data","page":"API","title":"Load Data","text":"","category":"section"},{"location":"api/#SimulationAnalysis.read_WCA_simulation","page":"API","title":"SimulationAnalysis.read_WCA_simulation","text":"read_WCA_simulation(filenamefull, dt; maxt=-1, every=1, original=false)\n\nRead a simulation of WCA particles done with LAMMPS. in the data file, the columns correspond to the following:\n\nAtom ID\nx position\ny position\nz position\nx force\ny force\nz force\n\nArguments\n\nfilenamefull::String: Path to the simulation file.\ndt::Float64: Time step.\nmaxt::Int=-1: Maximum number of time steps to read.\nevery::Int=1: Read every every-th time step.\noriginal::Bool=false: Whether to reconstruct the original trajectories.\n\nReturns\n\nSingleComponentSimulation: A SingleComponentSimulation object.\n\n\n\n\n\n","category":"function"},{"location":"api/#SimulationAnalysis.read_Newtonian_KAWCA_simulation","page":"API","title":"SimulationAnalysis.read_Newtonian_KAWCA_simulation","text":"read_Newtonian_KAWCA_simulation(filenamefull, dt; maxt=-1, every=1, original=false)\n\nRead a Newtonian simulation of a Kob-Andersen WCA mixture. The file was generated with LAMMPS.  The columns in the data file correspond to the following:\n\nAtom ID\nAtom type\nx position\ny position\nz position\nx velocities\ny velocities\nz velocities\n\nArguments\n\nfilenamefull::String: Path to the simulation file.\ndt::Float64: Time step.\nmaxt::Int=-1: Maximum number of time steps to read.\nevery::Int=1: Read every every-th time step.\noriginal::Bool=false: Whether to reconstruct the original trajectories.\n\nReturns\n\nMultiComponentSimulation: A MultiComponentSimulation object.\n\n\n\n\n\n","category":"function"},{"location":"api/#SimulationAnalysis.read_Brownian_KALJ_simulation","page":"API","title":"SimulationAnalysis.read_Brownian_KALJ_simulation","text":"read_Brownian_KALJ_simulation(filenamefull, dt; maxt=-1, every=1, original=false, forces=true)\n\nRead a Brownian simulation of a Kob-Andersen Lennard-Jones mixture. The file was generated with LAMMPS.  The columns in the data file correspond to the following:\n\nAtom ID\nAtom type\nx position\ny position\nz position\n\nArguments\n\nfilenamefull::String: Path to the simulation file.\ndt::Float64: Time step.\nmaxt::Int=-1: Maximum number of time steps to read.\nevery::Int=1: Read every every-th time step.\noriginal::Bool=false: Whether to reconstruct the original trajectories.\nforces::Bool=true: Whether to compute forces.\n\nReturns\n\nMultiComponentSimulation: A MultiComponentSimulation object.\n\n\n\n\n\n","category":"function"},{"location":"api/#SimulationAnalysis.read_Brownian_KAWCA_simulation","page":"API","title":"SimulationAnalysis.read_Brownian_KAWCA_simulation","text":"read_Brownian_KAWCA_simulation(filenamefull, dt; maxt=-1, every=1, original=false, forces=true)\n\nRead a Brownian simulation of a Kob-Andersen WCA mixture. The file was generated with LAMMPS.  The columns in the data file correspond to the following:\n\nAtom ID\nAtom type\nx position\ny position\nz position\n\nArguments\n\nfilenamefull::String: Path to the simulation file.\ndt::Float64: Time step.\nmaxt::Int=-1: Maximum number of time steps to read.\nevery::Int=1: Read every every-th time step.\noriginal::Bool=false: Whether to reconstruct the original trajectories.\nforces::Bool=true: Whether to compute forces.\n\nReturns\n\nMultiComponentSimulation: A MultiComponentSimulation object.\n\n\n\n\n\n","category":"function"},{"location":"api/#SimulationAnalysis.read_monodisperse_hard_sphere_simulation","page":"API","title":"SimulationAnalysis.read_monodisperse_hard_sphere_simulation","text":"read_monodisperse_hard_sphere_simulation(filename; original=false, velocities=false, forcestype=false, dtarr=true)\n\nRead a simulation of monodisperse particles. The file was generated with SimulationCode.jl.\n\nArguments\n\nfilename::String: Path to the simulation file.\noriginal::Bool=false: Whether to reconstruct the original trajectories.\nvelocities::Bool=false: Whether to read velocities.\nforcestype=false: Type of forces to compute.\ndtarr::Bool=true: Whether to compute the time step array.\n\nReturns\n\nSingleComponentSimulation: A SingleComponentSimulation object.\n\n\n\n\n\n","category":"function"},{"location":"api/#SimulationAnalysis.read_continuously_hard_sphere_simulation","page":"API","title":"SimulationAnalysis.read_continuously_hard_sphere_simulation","text":"read_continuously_hard_sphere_simulation(filename; original=false, velocities=false, forcestype=false, time_origins=\"quasilog\")\n\nRead a simulation of continuously polydisperse particles. The file was generated with SimulationCode.jl.\n\nArguments\n\nfilename::String: Path to the simulation file.\noriginal::Bool=false: Whether to reconstruct the original trajectories.\nvelocities::Bool=false: Whether to read velocities.\nforcestype=false: Type of forces to compute.\ntime_origins=\"quasilog\": How to select the time origins.\n\nReturns\n\nSingleComponentSimulation: A SingleComponentSimulation object.\n\n\n\n\n\n","category":"function"},{"location":"api/#K-Space","page":"API","title":"K-Space","text":"","category":"section"},{"location":"api/#SimulationAnalysis.KSpace","page":"API","title":"SimulationAnalysis.KSpace","text":"KSpace{dims, S, OA}\n\nA struct to hold the k-space information of a simulation.\n\nFields\n\ns::S: The simulation object.\nNk::Int64: The number of k-vectors.\nk_lengths::Array{Float64, 1}: The lengths of the k-vectors.\nk_array::Array{Float64, 2}: The k-vectors.\nkfactor::Int64: The k-factor.\ncartesian_to_linear::OA: A mapping from Cartesian to linear indices.\n\n\n\n\n\n","category":"type"},{"location":"api/#SimulationAnalysis.construct_k_space","page":"API","title":"SimulationAnalysis.construct_k_space","text":"construct_k_space(s::Simulation, bounds; kfactor=1, negative=false, rectangular=false)\n\nConstruct the k-space of a simulation.\n\nArguments\n\ns::Simulation: The simulation object.\nbounds: The bounds of the k-space.\nkfactor=1: The k-factor.\nnegative=false: Whether to include negative k-vectors.\nrectangular=false: Whether to use a rectangular k-space.\n\nReturns\n\nA KSpace object.\n\n\n\n\n\n","category":"function"},{"location":"api/#Correlation-Function","page":"API","title":"Correlation Function","text":"","category":"section"},{"location":"api/#SimulationAnalysis.find_correlation_function","page":"API","title":"SimulationAnalysis.find_correlation_function","text":"find_correlation_function(A, B, s)\n\nComputes the correlation function between two lists of observables. The observables are assumed to be complex-valued. The correlation function is a complex number. The correlation function is averaged over the first dimension of A and B.\n\nArguments\n\nA::Array{Complex{Float64}, 2}: The first list of observables.\nB::Array{Complex{Float64}, 2}: The second list of observables.\ns::Simulation: The simulation.\n\nReturns\n\nC::Array{Complex{Float64}, 1}: The correlation function.\n\n\n\n\n\n","category":"function"},{"location":"api/#SimulationAnalysis.find_correlation_matrix","page":"API","title":"SimulationAnalysis.find_correlation_matrix","text":"find_correlation_matrix(observables_list1, observables_list2, kspace, s)\n\nComputes the correlation matrix between two lists of observables. The observables are assumed to be complex-valued. The correlation matrix is a matrix of complex numbers.\n\nArguments\n\nobservables_list1::Array{Array{Complex{Float64}, 2}, 1}: The first list of observables.\nobservables_list2::Array{Array{Complex{Float64}, 2}, 1}: The second list of observables.\ns::Simulation: The simulation.\n\nReturns\n\nmatrix::Array{Array{Complex{Float64}, 1}, 2}: The correlation matrix.\n\n\n\n\n\n","category":"function"},{"location":"api/#Density-Modes","page":"API","title":"Density Modes","text":"","category":"section"},{"location":"api/#SimulationAnalysis.find_density_modes","page":"API","title":"SimulationAnalysis.find_density_modes","text":"find_density_modes(s::SingleComponentSimulation, kspace::KSpace; verbose=true)\n\nCalculates the density modes for a single-component simulation.\n\nArguments\n\ns::SingleComponentSimulation: The simulation.\nkspace::KSpace: The k-space.\nverbose::Bool=true: Whether to print verbose output.\n\nReturns\n\nSingleComponentDensityModes: The density modes.\n\n\n\n\n\nfind_density_modes(s::MultiComponentSimulation, kspace::KSpace; verbose=true)\n\nCalculates the density modes for a multi-component simulation.\n\nArguments\n\ns::MultiComponentSimulation: The simulation.\nkspace::KSpace: The k-space.\nverbose::Bool=true: Whether to print verbose output.\n\nReturns\n\nMultiComponentDensityModes: The density modes.\n\n\n\n\n\n","category":"function"},{"location":"api/#SimulationAnalysis.SingleComponentDensityModes","page":"API","title":"SimulationAnalysis.SingleComponentDensityModes","text":"SingleComponentDensityModes\n\nA struct to hold the density modes of a single-component simulation.\n\nFields\n\nRe::Array{Float64, 2}: The real part of the density modes.\nIm::Array{Float64, 2}: The imaginary part of the density modes.\n\n\n\n\n\n","category":"type"},{"location":"api/#SimulationAnalysis.MultiComponentDensityModes","page":"API","title":"SimulationAnalysis.MultiComponentDensityModes","text":"MultiComponentDensityModes\n\nA struct to hold the density modes of a multi-component simulation.\n\nFields\n\nRe::Vector{Array{Float64, 2}}: The real part of the density modes for each species.\nIm::Vector{Array{Float64, 2}}: The imaginary part of the density modes for each species.\n\n\n\n\n\n","category":"type"},{"location":"api/#F4-Diagonal","page":"API","title":"F4 Diagonal","text":"","category":"section"},{"location":"api/#SimulationAnalysis.find_F4_diagonal","page":"API","title":"SimulationAnalysis.find_F4_diagonal","text":"find_F4_diagonal(s::Simulation, kspace, k1_bounds, k2_bounds, cosθ_bounds)\n\nCalculates the diagonal part of the four-point dynamic susceptibility.\n\nArguments\n\ns::Simulation: The simulation.\nkspace: The k-space.\nk1_bounds: The bounds for the length of the first k-vector.\nk2_bounds: The bounds for the length of the second k-vector.\ncosθ_bounds: The bounds for the cosine of the angle between the two k-vectors.\n\nReturns\n\nF4_arr: The diagonal part of the four-point dynamic susceptibility.\nF2F2_arr: The product of the two-point dynamic susceptibilities.\n\n\n\n\n\nfind_F4_diagonal(kspace, kvecset, pairs_idt)\n\nCalculates the diagonal part of the four-point dynamic susceptibility for a given set of k-vectors and time pairs.\n\nArguments\n\nkspace: The k-space.\nkvecset: The set of pairs of k-vector indices.\npairs_idt: The pairs of time indices.\n\nReturns\n\nF4: The diagonal part of the four-point dynamic susceptibility.\nF2F2: The product of the two-point dynamic susceptibilities.\n\n\n\n\n\n","category":"function"},{"location":"api/#SimulationAnalysis.find_F4_diagonal_all_k","page":"API","title":"SimulationAnalysis.find_F4_diagonal_all_k","text":"find_F4_diagonal_all_k(s, kspace, idt, Nksample, Ncostheta)\n\nCalculates the diagonal part of the four-point dynamic susceptibility for all k-vectors.\n\nArguments\n\ns: The simulation.\nkspace: The k-space.\nidt: The index of the time difference.\nNksample: The number of k-samples.\nNcostheta: The number of cos(theta) samples.\n\nReturns\n\nk_sample_array: The array of k-samples.\ncostheta_sample_array: The array of cos(theta) samples.\nF4_arr: The diagonal part of the four-point dynamic susceptibility.\nF2F2_arr: The product of the two-point dynamic susceptibilities.\n\n\n\n\n\n","category":"function"},{"location":"api/#SimulationAnalysis.find_F4_super_diagonal","page":"API","title":"SimulationAnalysis.find_F4_super_diagonal","text":"find_F4_super_diagonal(s, kspace; dk=0.1, kmax=0.0)\n\nCalculates the super-diagonal part of the four-point dynamic susceptibility.\n\nArguments\n\ns: The simulation.\nkspace: The k-space.\ndk=0.1: The bin size for k.\nkmax=0.0: The maximum k.\n\nReturns\n\nk_sample_array: The array of k-samples.\nF4_binned: The binned super-diagonal part of the four-point dynamic susceptibility.\nF2_binned_sq: The square of the binned two-point dynamic susceptibility.\n\n\n\n\n\n","category":"function"},{"location":"api/#Forces","page":"API","title":"Forces","text":"","category":"section"},{"location":"api/#SimulationAnalysis.Weysser","page":"API","title":"SimulationAnalysis.Weysser","text":"Weysser <: InteractionPotential\n\nA struct for the Weysser interaction potential.\n\nFields\n\nϵ::Float64: The interaction strength.\nδ::Float64: The interaction range.\n\n\n\n\n\n","category":"type"},{"location":"api/#SimulationAnalysis.Berthier","page":"API","title":"SimulationAnalysis.Berthier","text":"Berthier <: InteractionPotential\n\nA struct for the Berthier interaction potential.\n\nFields\n\nc0::Float64: The c0 coefficient.\nc2::Float64: The c2 coefficient.\nc4::Float64: The c4 coefficient.\nζ::Float64: The zeta coefficient.\nσ_ratio::Float64: The ratio of the diameters.\n\n\n\n\n\n","category":"type"},{"location":"api/#SimulationAnalysis.WCA","page":"API","title":"SimulationAnalysis.WCA","text":"WCA <: InteractionPotential\n\nA struct for the WCA interaction potential.\n\nFields\n\nϵ::Float64: The interaction strength.\nσ::Float64: The interaction range.\n\n\n\n\n\n","category":"type"},{"location":"api/#SimulationAnalysis.KAWCA","page":"API","title":"SimulationAnalysis.KAWCA","text":"KAWCA <: InteractionPotential\n\nA struct for the Kob-Andersen WCA interaction potential.\n\nFields\n\nϵ11::Float64: The interaction strength between particles of type 1.\nϵ12::Float64: The interaction strength between particles of type 1 and 2.\nϵ22::Float64: The interaction strength between particles of type 2.\nσ11::Float64: The interaction range between particles of type 1.\nσ12::Float64: The interaction range between particles of type 1 and 2.\nσ22::Float64: The interaction range between particles of type 2.\n\n\n\n\n\n","category":"type"},{"location":"api/#SimulationAnalysis.calculate_forces!","page":"API","title":"SimulationAnalysis.calculate_forces!","text":"calculate_forces!(s, forcestype::Bool)\n\nCalculate the forces for a simulation.\n\nThis is a placeholder function that throws an error if forcestype is true.\n\nArguments\n\ns: The simulation object.\nforcestype::Bool: Whether to calculate forces.\n\n\n\n\n\ncalculate_forces!(s, U; friction=false, cutoff=1.25)\n\nRecalculates the total force on all particles according to the langevin equation F = -∇U - γv. This function also updates the total potential energy in the output datastructure.\n\n\n\n\n\ncalculate_forces!(s, U::KAWCA; cutoff=2.0^(1.0/6.0))\n\nRecalculates the total force on all particles in a multi-component simulation s according to the Kob-Andersen Weeks-Chandler-Andersen system U, and updates the force array in s with the calculated values.\n\nArguments\n\ns: a MultiComponentSimulation object that contains the position and force arrays for each particle.\nU::KAWCA: the interaction type.\ncutoff: the cutoff distance for the potential energy function. Default is 2.0^(1.0/6.0).\n\n\n\n\n\n","category":"function"},{"location":"api/#Intermediate-Scattering-Function","page":"API","title":"Intermediate Scattering Function","text":"","category":"section"},{"location":"api/#SimulationAnalysis.find_intermediate_scattering_function","page":"API","title":"SimulationAnalysis.find_intermediate_scattering_function","text":"find_intermediate_scattering_function(s::Simulation; kmin=7.0, kmax=7.4, kfactor=1)\n\nCalculates the intermediate scattering function for a simulation.\n\nArguments\n\ns::Simulation: The simulation.\nkmin=7.0: The minimum k value.\nkmax=7.4: The maximum k value.\nkfactor=1: The k-factor.\n\nReturns\n\nF: The intermediate scattering function.\n\n\n\n\n\nfind_intermediate_scattering_function(s::Simulation, kspace::KSpace, ρkt, k_sample_array::AbstractVector; k_binwidth=0.1)\n\nCalculates the intermediate scattering function for a simulation for a given array of k-values.\n\nArguments\n\ns::Simulation: The simulation.\nkspace::KSpace: The k-space.\nρkt: The density modes.\nk_sample_array::AbstractVector: The array of k-values.\nk_binwidth=0.1: The bin width for k.\n\nReturns\n\nF_array: An array of intermediate scattering functions.\n\n\n\n\n\nfind_intermediate_scattering_function(s::SingleComponentSimulation, kspace::KSpace, ρkt::SingleComponentDensityModes; kmin=0.0, kmax=10.0^10.0)\n\nCalculates the intermediate scattering function for a single-component simulation.\n\nArguments\n\ns::SingleComponentSimulation: The simulation.\nkspace::KSpace: The k-space.\nρkt::SingleComponentDensityModes: The density modes.\nkmin=0.0: The minimum k value.\nkmax=10.0^10.0: The maximum k value.\n\nReturns\n\nFk: The intermediate scattering function.\n\n\n\n\n\nfind_intermediate_scattering_function(s::MultiComponentSimulation, kspace::KSpace, ρkt::MultiComponentDensityModes; kmin=0.0, kmax=10.0^10.0)\n\nCalculates the intermediate scattering function for a multi-component simulation.\n\nArguments\n\ns::MultiComponentSimulation: The simulation.\nkspace::KSpace: The k-space.\nρkt::MultiComponentDensityModes: The density modes.\nkmin=0.0: The minimum k value.\nkmax=10.0^10.0: The maximum k value.\n\nReturns\n\nFk: The intermediate scattering function.\n\n\n\n\n\n","category":"function"},{"location":"api/#SimulationAnalysis.find_self_intermediate_scattering_function","page":"API","title":"SimulationAnalysis.find_self_intermediate_scattering_function","text":"find_self_intermediate_scattering_function(s::Simulation; kmin=7.0, kmax=7.4, kfactor=1)\n\nCalculates the self-intermediate scattering function for a simulation.\n\nArguments\n\ns::Simulation: The simulation.\nkmin=7.0: The minimum k value.\nkmax=7.4: The maximum k value.\nkfactor=1: The k-factor.\n\nReturns\n\nF: The self-intermediate scattering function.\n\n\n\n\n\nfind_self_intermediate_scattering_function(s::Simulation, kspace::KSpace, k_sample_array::AbstractVector; k_binwidth=0.1)\n\nCalculates the self-intermediate scattering function for a simulation for a given array of k-values.\n\nArguments\n\ns::Simulation: The simulation.\nkspace::KSpace: The k-space.\nk_sample_array::AbstractVector: The array of k-values.\nk_binwidth=0.1: The bin width for k.\n\nReturns\n\nF_array: An array of self-intermediate scattering functions.\n\n\n\n\n\nfind_self_intermediate_scattering_function(s::SingleComponentSimulation, kspace::KSpace; kmin=0.0, kmax=10.0^10.0)\n\nCalculates the self-intermediate scattering function for a single-component simulation.\n\nArguments\n\ns::SingleComponentSimulation: The simulation.\nkspace::KSpace: The k-space.\nkmin=0.0: The minimum k value.\nkmax=10.0^10.0: The maximum k value.\n\nReturns\n\nFk: The self-intermediate scattering function.\nFks_per_particle: The self-intermediate scattering function per particle.\n\n\n\n\n\n","category":"function"},{"location":"api/#Structure-Factors","page":"API","title":"Structure Factors","text":"","category":"section"},{"location":"api/#SimulationAnalysis.find_structure_factor","page":"API","title":"SimulationAnalysis.find_structure_factor","text":"find_structure_factor(s::Simulation; kmin=7.0, kmax=7.4, kfactor=1)\n\nCalculates the structure factor for a simulation.\n\nArguments\n\ns::Simulation: The simulation.\nkmin=7.0: The minimum k value.\nkmax=7.4: The maximum k value.\nkfactor=1: The k-factor.\n\nReturns\n\nS: The structure factor.\n\n\n\n\n\nfind_structure_factor(s::Simulation, kspace::KSpace, ρkt::AbstractDensityModes, k_sample_array::AbstractVector; k_binwidth=0.1)\n\nCalculates the structure factor for a simulation for a given array of k-values.\n\nArguments\n\ns::Simulation: The simulation.\nkspace::KSpace: The k-space.\nρkt::AbstractDensityModes: The density modes.\nk_sample_array::AbstractVector: The array of k-values.\nk_binwidth=0.1: The bin width for k.\n\nReturns\n\nS_array: An array of structure factors.\n\n\n\n\n\nfind_structure_factor(s::SingleComponentSimulation, kspace::KSpace, ρkt::SingleComponentDensityModes; kmin=0.0, kmax=10.0^10.0)\n\nCalculates the structure factor for a single-component simulation.\n\nArguments\n\ns::SingleComponentSimulation: The simulation.\nkspace::KSpace: The k-space.\nρkt::SingleComponentDensityModes: The density modes.\nkmin=0.0: The minimum k value.\nkmax=10.0^10.0: The maximum k value.\n\nReturns\n\nSk: The structure factor.\n\n\n\n\n\nfind_structure_factor(s::MultiComponentSimulation, kspace::KSpace, ρkt::MultiComponentDensityModes; kmin=0.0, kmax=10.0^10.0)\n\nThis function computes the static structure factor for a given simulation s using the density modes in ρkt and the k-space information in kspace. The structure factor is calculated separately for each species combination.\n\nArguments\n\ns: A MultiComponentSimulation object representing the simulation data.\nkspace: A KSpace object containing information about the k-space grid.\nρkt: A MultiComponentDensityModes object representing the Fourier transform of the density fields for each species.\nkmin: The minimum k value to include in the calculation. Default value is 0.0.\nkmax: The maximum k value to include in the calculation. Default value is 10^10.\n\nReturns\n\nSk: A square matrix of size N_species x N_species representing the static structure factor. Sk[i, j] represents the structure factor for species i and j.\n\n\n\n\n\n","category":"function"},{"location":"api/#SimulationAnalysis.find_S4_offiagonal","page":"API","title":"SimulationAnalysis.find_S4_offiagonal","text":"find_S4_offiagonal(s, kspace, ρkt, Ntheta13, Nphi23; q1=7.2, dq1=0.1, q2=7.2 , dq2=0.1, costheta12=cos(0π/4), dcostheta12=0.05, q3=7.1, dq3=0.1, dcostheta13=0.05, dphi23=0.05π, maxsamples=10^10)\n\nCalculates the off-diagonal part of the four-point structure factor.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mean-Squared-Displacement","page":"API","title":"Mean Squared Displacement","text":"","category":"section"},{"location":"api/#SimulationAnalysis.find_mean_squared_displacement","page":"API","title":"SimulationAnalysis.find_mean_squared_displacement","text":"find_mean_squared_displacement(simulation::Simulation; per_particle=false)\n\nCalculates the mean squared displacement for a simulation.\n\nArguments\n\nsimulation::Simulation: The simulation.\nper_particle=false: Whether to return the mean squared displacement per particle.\n\nReturns\n\nmsd: The mean squared displacement.\nmsd_per_particle: The mean squared displacement per particle (if per_particle is true).\n\n\n\n\n\nfind_mean_squared_displacement(r, dt_array, t1_t2_pair_array; verbose=true)\n\nCalculates the mean squared displacement from the t1, t2 pairs.\n\nArguments\n\nr: The positions of the particles.\ndt_array: The array of time differences.\nt1_t2_pair_array: The array of pairs of times.\nverbose=true: Whether to print verbose output.\n\nReturns\n\nmsd: The mean squared displacement.\nmsd_per_particle: The mean squared displacement per particle.\n\n\n\n\n\n","category":"function"},{"location":"api/#Overlap-Function","page":"API","title":"Overlap Function","text":"","category":"section"},{"location":"api/#SimulationAnalysis.find_overlap_function","page":"API","title":"SimulationAnalysis.find_overlap_function","text":"find_overlap_function(s; a=0.5)\n\nCalculates the overlap function for a simulation.\n\nArguments\n\ns: The simulation.\na=0.5: The cutoff distance.\n\nReturns\n\nFs: The overlap function.\nFs_pp: The overlap function per particle.\n\n\n\n\n\n","category":"function"},{"location":"api/#Neighborlists","page":"API","title":"Neighborlists","text":"","category":"section"},{"location":"api/#SimulationAnalysis.find_relative_distance_neighborlists","page":"API","title":"SimulationAnalysis.find_relative_distance_neighborlists","text":"find_relative_distance_neighborlists(s, rc; ζ = 0.2)\n\nFinds the neighbor lists for a simulation based on the relative distance between particles.\n\nArguments\n\ns: The simulation.\nrc: The cutoff distance.\nζ=0.2: The polydispersity parameter.\n\nReturns\n\nneighbourlists: The neighbor lists.\n\n\n\n\n\n","category":"function"},{"location":"api/#SimulationAnalysis.find_absolute_distance_neighborlists","page":"API","title":"SimulationAnalysis.find_absolute_distance_neighborlists","text":"find_absolute_distance_neighborlists(s, rc)\n\nFinds the neighbor lists for a simulation based on the absolute distance between particles.\n\nArguments\n\ns: The simulation.\nrc: The cutoff distance.\n\nReturns\n\nneighbourlists: The neighbor lists.\n\n\n\n\n\n","category":"function"},{"location":"api/#SimulationAnalysis.find_voronoi_neighborlists","page":"API","title":"SimulationAnalysis.find_voronoi_neighborlists","text":"find_voronoi_neighborlists(s; max_distance_from_boundary=3.0, verbose=true, indices=eachindex(s.t_array))\n\nComputes the Voronoi neighborlists for a simulation.\n\nArguments\n\ns: The simulation.\nmax_distance_from_boundary=3.0: The maximum distance from the boundary to take periodic images into account.\nverbose=true: Whether to print verbose output.\nindices=eachindex(s.t_array): The indices of the time steps to consider.\n\nReturns\n\nneighbourlists: The Voronoi neighborlists.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bond-Breaking-Parameter","page":"API","title":"Bond Breaking Parameter","text":"","category":"section"},{"location":"api/#SimulationAnalysis.find_CB","page":"API","title":"SimulationAnalysis.find_CB","text":"find_CB(s, neighbourlists1, neighbourlists2)\n\nCalculates the bond-breaking parameter CB for all particles.\n\n\n\n\n\n","category":"function"},{"location":"api/#SimulationAnalysis.find_χBB_smoothed","page":"API","title":"SimulationAnalysis.find_χBB_smoothed","text":"find_χBB_smoothed(s, neighbourlists1, neighbourlists2, r, σ, CB_mean)\n\nComputes the smoothed bond-breaking susceptibility.\n\n\n\n\n\n","category":"function"},{"location":"api/#SimulationAnalysis.find_chi_BB","page":"API","title":"SimulationAnalysis.find_chi_BB","text":"find_chi_BB(s, neighbourlists1, neighbourlists2, r_bin_edges::AbstractRange, cb; verbose=true)\n\nComputes the bond-breaking susceptibility.\n\n\n\n\n\n","category":"function"},{"location":"api/#Utils","page":"API","title":"Utils","text":"","category":"section"},{"location":"api/#SimulationAnalysis.find_relaxation_time","page":"API","title":"SimulationAnalysis.find_relaxation_time","text":"find_relaxation_time(t, F; threshold=exp(-1))\n\nCalculates the relaxation time of a function F(t).\n\nThe relaxation time is defined as the time at which F(t) drops below a certain threshold. The function uses linear interpolation on a logarithmic time scale to find the relaxation time.\n\nArguments\n\nt: The time points.\nF: The function values.\nthreshold=exp(-1): The threshold.\n\nReturns\n\nThe relaxation time.\n\n\n\n\n\n","category":"function"},{"location":"api/#Radial-Distribution-Function","page":"API","title":"Radial Distribution Function","text":"","category":"section"},{"location":"api/#SimulationAnalysis.find_radial_distribution_function","page":"API","title":"SimulationAnalysis.find_radial_distribution_function","text":"find_radial_distribution_function(s::MultiComponentSimulation, Nbins, rmax)\n\nCalculates the radial distribution function for a multi-component simulation.\n\n\n\n\n\nfind_radial_distribution_function(s::SingleComponentSimulation, Nbins::Int, rmax; Ntasks=1)\n\nCalculates the radial distribution function for a single-component simulation.\n\n\n\n\n\nfind_radial_distribution_function(s::SingleComponentSimulation, dr::Float64, rmax; Ntasks=1)\n\nCalculates the radial distribution function for a single-component simulation.\n\n\n\n\n\n","category":"function"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Here are some examples of how to use SimulationAnalysis.jl.","category":"page"},{"location":"examples/#Mean-Squared-Displacement","page":"Examples","title":"Mean Squared Displacement","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This example shows how to calculate the mean squared displacement (MSD) for a simulation.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using SimulationAnalysis\n\n# Load a simulation\nfilename = \"path/to/your/simulation.dat\"\ndt = 0.005\nsim = read_WCA_simulation(filename, dt)\n\n# Calculate the MSD\nmsd = find_mean_squared_displacement(sim)\n\n# The `msd` variable now contains the mean squared displacement as a function of time.","category":"page"},{"location":"examples/#Intermediate-Scattering-Function","page":"Examples","title":"Intermediate Scattering Function","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This example shows how to calculate the intermediate scattering function (ISF) for a simulation.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using SimulationAnalysis\n\n# Load a simulation\nfilename = \"path/to/your/simulation.dat\"\ndt = 0.005\nsim = read_WCA_simulation(filename, dt)\n\n# Define the k-range for the ISF\nkmin = 7.0\nkmax = 7.4\n\n# Calculate the ISF\nisf = find_intermediate_scattering_function(sim; kmin=kmin, kmax=kmax)\n\n# The `isf` variable now contains the intermediate scattering function as a function of time.","category":"page"},{"location":"#SimulationAnalysis.jl","page":"Home","title":"SimulationAnalysis.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SimulationAnalysis.jl is a Julia package for analyzing molecular dynamics simulations.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Load simulation data from various formats.\nCalculate various observables, such as:\nRadial distribution function\nMean squared displacement\nIntermediate scattering function\nStructure factor\nand more.","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"API Reference: Detailed information about all public functions and types.\nTutorial: A step-by-step guide to using the package.\nExamples: A collection of examples showcasing different features.","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"This tutorial shows how to use SimulationAnalysis.jl to load a simulation and calculate the radial distribution function.","category":"page"},{"location":"tutorial/#1.-Load-a-simulation","page":"Tutorial","title":"1. Load a simulation","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"First, we need to load a simulation. The package provides several functions for loading different types of simulations, either generated by LAMMPS or by SimulationCode.jl. In this tutorial, we will use read_WCA_simulation to load a simulation of a Weeks-Chandler-Andersen (WCA) fluid.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using SimulationAnalysis\n\n# Path to the simulation file\nfilename = \"path/to/your/simulation.txt\"\n\n# Time step of the simulation\ndt = 0.005\n\n# Load the simulation\nsim = read_WCA_simulation(filename, dt)","category":"page"},{"location":"tutorial/#2.-Calculate-the-radial-distribution-function","page":"Tutorial","title":"2. Calculate the radial distribution function","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Now that we have loaded the simulation, we can calculate the radial distribution function, g(r).","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# Number of bins for the g(r)\nNbins = 100\n\n# Maximum radius for the g(r)\nrmax = 10.0\n\n# Calculate the g(r)\nbin_centres, gr = find_radial_distribution_function(sim, Nbins, rmax)","category":"page"},{"location":"tutorial/#3.-Plot-the-results","page":"Tutorial","title":"3. Plot the results","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Finally, we can plot the results using a plotting package of your choice. For example, using Plots.jl:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using Plots\n\nplot(bin_centres, gr, xlabel=\"r\", ylabel=\"g(r)\", legend=false)","category":"page"}]
}
