var documenterSearchIndex = {"docs":
[{"location":"#SimulationAnalysis.jl","page":"Home","title":"SimulationAnalysis.jl","text":"","category":"section"},{"location":"#SimulationAnalysis._find_density_modes!-NTuple{4, Any}","page":"Home","title":"SimulationAnalysis._find_density_modes!","text":"Calculate the density modes for a given simulation r and wave vector space kspace.\n\nReρ and Imρ arrays are preallocated arrays with size (N_timesteps, Nk) for each species of the simulation. \n\nArgs:     - Reρ (array): preallocated array to store the real part of the density modes.     - Imρ (array): preallocated array to store the imaginary part of the density modes.     - r (array): array containing the positions of the particles at each time step. It has shape (Ndim, N, Ntimesteps), where                   Ndim is the number of dimensions, N is the number of particles and Ntimesteps is the number of time steps.     - kspace (KSpace): the wave vector space used to calculate the density modes.\n\nReturns:     - None: Reρ and Imρ arrays are updated in-place.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.calculate_forces!-Tuple{Any, SimulationAnalysis.KAWCA}","page":"Home","title":"SimulationAnalysis.calculate_forces!","text":"calculate_forces!(s, U::KAWCA; cutoff=2.0^(1.0/6.0))\n\nRecalculates the total force on all particles in a multi-component simulation 's' according to the Kob-Andersen Weeks-Chandler-Andersen system U,  and updates the force array in 's' with the calculated values. \n\nArguments\n\ns: a MultiComponentSimulation object that contains the position and force arrays for each particle.\nU::KAWCA: the interaction type.\ncutoff: the cutoff distance for the potential energy function. Default is 2.0^(1.0/6.0).\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.find_correlation_function!-NTuple{5, Any}","page":"Home","title":"SimulationAnalysis.find_correlation_function!","text":"find_correlation_function!(AB, A, B, kspace::KSpace, dt_array, t1_t2_pair_array)\n\nComputes the correlation function between two lists of observables. The observables are assumed to be complex-valued. The correlation function is a complex number. The correlation function is averaged over the first dimension of A and B, a given set of time differences, and a given set of pairs of times. The correlation function is computed for each time difference and is stored in the array AB.\n\nArguments\n\nAB::Array{Complex{Float64}, 1}: The array where the correlation function is stored.\nA::Array{Complex{Float64}, 2}: The first list of observables. The first index is the wavevector index and the second index is the time index.\nB::Array{Complex{Float64}, 2}: The second list of observables.\ndt_array::Array{Float64, 1}: The array of time differences.\nt1_t2_pair_array::Array{Array{Int64, 2}, 1}: The array of pairs of times. Each element of the array is a matrix with two columns. Each row of the matrix contains the indices of the times t1 and t2 for which the correlation function is computed.\n\nReturns\n\nNothing: The correlation function is stored in the array AB.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.find_correlation_function-Tuple{Any, Any, Any}","page":"Home","title":"SimulationAnalysis.find_correlation_function","text":"find_correlation_function(A, B, s)\n\nComputes the correlation function between two lists of observables. The observables are assumed to be complex-valued. The correlation function is a complex number. The correlation function is averaged over the first dimension of A and B.\n\nArguments\n\nA::Array{Complex{Float64}, 2}: The first list of observables.\nB::Array{Complex{Float64}, 2}: The second list of observables.\ns::Simulation: The simulation.\n\nReturns\n\nC::Array{Complex{Float64}, 1}: The correlation function.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.find_correlation_matrix-Tuple{Any, Any, SimulationAnalysis.Simulation}","page":"Home","title":"SimulationAnalysis.find_correlation_matrix","text":"find_correlation_matrix(observables_list1, observables_list2, kspace, s)\n\nComputes the correlation matrix between two lists of observables. The observables are assumed to be complex-valued. The correlation matrix is a matrix of complex numbers.\n\nArguments\n\nobservables_list1::Array{Array{Complex{Float64}, 2}, 1}: The first list of observables.\nobservables_list2::Array{Array{Complex{Float64}, 2}, 1}: The second list of observables.\ns::Simulation: The simulation.\n\nReturns\n\nmatrix::Array{Array{Complex{Float64}, 1}, 2}: The correlation matrix.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.find_density_modes-Tuple{SimulationAnalysis.MultiComponentSimulation, SimulationAnalysis.KSpace}","page":"Home","title":"SimulationAnalysis.find_density_modes","text":"finddensitymodes(s::MultiComponentSimulation, kspace::KSpace; verbose=true)\n\nThis function calculates the density modes for a multi-component simulation s using the wave vectors in kspace. The density modes are calculated for each species in the simulation and returned as a MultiComponentDensityModes object.\n\nArguments:\n\ns::MultiComponentSimulation: A MultiComponentSimulation object representing the simulation.\nkspace::KSpace: A KSpace object representing the wave vectors to use for calculating the density modes.\nverbose::Bool=true: A flag indicating whether to print verbose output.\n\nReturns:\n\nmodes::MultiComponentDensityModes: A MultiComponentDensityModes object containing the real and imaginary parts of the density modes for each species.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.find_diagonal_four_point_k_vector_set-NTuple{4, Any}","page":"Home","title":"SimulationAnalysis.find_diagonal_four_point_k_vector_set","text":"find_diagonal_four_point_k_vector_set(kspace::KSpace3D, k1_bounds, k2_bounds, cosθ_bounds)    \n\nFinds the set of k vectors that satisfy the conditions given for k1, k2 and cosθ12.\nThese are specified in 2-Tuples.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.find_mean_squared_displacement-Tuple{Any, Any, Any}","page":"Home","title":"SimulationAnalysis.find_mean_squared_displacement","text":"Calculates the mean squared displacement from the t1, t2 pairs.  Returns:     An array contaning the mean squared displacement     An array contaning the mean squared displacement per particle\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.find_mobile_clusters-Tuple{Set{Int64}, Any}","page":"Home","title":"SimulationAnalysis.find_mobile_clusters","text":"find_mobile_clusters(mobile_particles, neighbourlists)\n\nFind clusters of mobile particles in a system. A cluster is defined as a set of particles that are connected by a bond. The function returns a vector of sets, where each set contains the indices of the particles in a cluster.\n\nArguments\n\nmobile_particles::Set{Int}: The indices of the mobile particles. \nneighbourlists::Vector{Vector{Int}}: The neighbourlists of the particles.\n\nReturns\n\nclusters::Vector{Set{Int}}: The clusters of mobile particles.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.find_structure_factor-Tuple{SimulationAnalysis.MultiComponentSimulation, SimulationAnalysis.KSpace, SimulationAnalysis.MultiComponentDensityModes}","page":"Home","title":"SimulationAnalysis.find_structure_factor","text":"Documentation for function findstructurefactor:\n\nThis function computes the static structure factor for a given simulation s using the density modes in ρkt and the k-space information in kspace. The structure factor is calculated separately for each species combination.\n\nArguments:\n\ns: A MultiComponentSimulation object representing the simulation data.\nkspace: A KSpace object containing information about the k-space grid.\nρkt: A MultiComponentDensityModes object representing the Fourier transform of the density fields for each species.\nkmin: The minimum k value to include in the calculation. Default value is 0.0.\nkmax: The maximum k value to include in the calculation. Default value is 10^10.\n\nReturns:\n\nSk: A square matrix of size Nspecies x Nspecies representing the static structure factor. Sk[i, j] represents the structure factor for species i and j.\n\nThe function iterates over all possible species combinations (α, β), and calls the realstaticcorrelation_function  function to calculate the structure factor for each combination. The result is stored in the Sk matrix.  The function then returns Sk normalized by the total number of particles in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.find_voronoi_neighborlists-Tuple{Any}","page":"Home","title":"SimulationAnalysis.find_voronoi_neighborlists","text":"find_neighborlists_voronoi(s::Simulation; max_distance_from_boundary=3.0) where Ndims\n\nComputes the Voronoi neighborlists for a simulation.\n\nArguments\n\ns::Simulation: The simulation.\nmax_distance_from_boundary::Float64: The maximum distance from the boundary to take periodic images into account.\n\nReturns\n\nneighbourlists::Vector{Vector{Vector{Int}}}: The Voronoi neighborlists.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.real_correlation_function!-Tuple{Any, Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, SimulationAnalysis.KSpace, Vararg{Any, 4}}","page":"Home","title":"SimulationAnalysis.real_correlation_function!","text":"find_correlation_function!(C, A, B, kspace, dt_array, t1_t2_pair_array)\n\nComputes the correlation function between two lists of observables. The observables are assumed to be complex-valued. The correlation function is a complex number. The correlation function is computed for a given k-space, a given set of time differences, and a given set of pairs of times. The correlation function is computed for each time difference and is stored in the array C.\n\nArguments\n\nC::Array{Complex{Float64}, 1}: The array where the correlation function is stored.\nA::Array{Complex{Float64}, 2}: The first list of observables. The first index is the wavevector index and the second index is the time index.\nB::Array{Complex{Float64}, 2}: The second list of observables.\nkspace::KSpace: The k-space.\ndt_array::Array{Float64, 1}: The array of time differences.\nt1_t2_pair_array::Array{Array{Int64, 2}, 1}: The array of pairs of times. Each element of the array is a matrix with two columns. Each row of the matrix contains the indices of the times t1 and t2 for which the correlation function is computed.\nkmin::Float64: The minimum value of the wavevector.\nkmax::Float64: The maximum value of the wavevector.\n\nReturns\n\nNothing: The correlation function is stored in the array C.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.real_static_correlation_function-Tuple{Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, SimulationAnalysis.KSpace, Any, Any}","page":"Home","title":"SimulationAnalysis.real_static_correlation_function","text":"real_static_correlation_function(ReA::Array{Float64, 2}, ImA::Array{Float64, 2}, ReB::Array{Float64, 2}, ImB::Array{Float64, 2}, kspace::KSpace, kmin, kmax)\n\nComputes the real-valued static correlation function between two lists of observables. The observables are assumed to be complex-valued. The correlation function is a real number.\n\nArguments\n\nReA::Array{Float64, 2}: The real part of the first list of observables.\nImA::Array{Float64, 2}: The imaginary part of the first list of observables.\nReB::Array{Float64, 2}: The real part of the second list of observables.\nImB::Array{Float64, 2}: The imaginary part of the second list of observables.\nkspace::KSpace: The k-space.\nkmin::Float64: The minimum value of the wavevector.\nkmax::Float64: The maximum value of the wavevector.\n\nReturns\n\nC::Float64: The correlation function.\n\n\n\n\n\n","category":"method"}]
}
