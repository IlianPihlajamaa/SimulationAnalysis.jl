var documenterSearchIndex = {"docs":
[{"location":"#SimulationAnalysis.jl","page":"Home","title":"SimulationAnalysis.jl","text":"","category":"section"},{"location":"#SimulationAnalysis.KSpace","page":"Home","title":"SimulationAnalysis.KSpace","text":"KSpace{dims, S, OA}\n\nA struct to hold the k-space information of a simulation.\n\nFields\n\ns::S: The simulation object.\nNk::Int64: The number of k-vectors.\nk_lengths::Array{Float64, 1}: The lengths of the k-vectors.\nk_array::Array{Float64, 2}: The k-vectors.\nkfactor::Int64: The k-factor.\ncartesian_to_linear::OA: A mapping from Cartesian to linear indices.\n\n\n\n\n\n","category":"type"},{"location":"#SimulationAnalysis.MultiComponentDensityModes","page":"Home","title":"SimulationAnalysis.MultiComponentDensityModes","text":"MultiComponentDensityModes\n\nA struct to hold the density modes of a multi-component simulation.\n\nFields\n\nRe::Vector{Array{Float64, 2}}: The real part of the density modes for each species.\nIm::Vector{Array{Float64, 2}}: The imaginary part of the density modes for each species.\n\n\n\n\n\n","category":"type"},{"location":"#SimulationAnalysis.MultiComponentSimulation","page":"Home","title":"SimulationAnalysis.MultiComponentSimulation","text":"MultiComponentSimulation\n\nA struct to hold the data of a multi-component simulation.\n\nFields\n\nN::Int64: Total number of particles.\nNdims::Int64: Number of dimensions.\nN_species::Int64: Number of species.\nN_particles_per_species::Vector{Int}: Number of particles per species.\nr_array::Vector{Array{Float64, 3}}: Particle positions for each species.\nv_array::Vector{Array{Float64, 3}}: Particle velocities for each species.\nF_array::Vector{Array{Float64, 3}}: Particle forces for each species.\nt_array::Vector{Float64}: Time steps.\nbox_sizes::Vector{Float64}: Box sizes.\ndt_array::Vector{Int}: Time step differences.\nt1_t2_pair_array::Vector{Array{Int64, 2}}: Time pairs.\nfilepath::String: Path to the simulation file.\n\n\n\n\n\n","category":"type"},{"location":"#SimulationAnalysis.SingleComponentDensityModes","page":"Home","title":"SimulationAnalysis.SingleComponentDensityModes","text":"SingleComponentDensityModes\n\nA struct to hold the density modes of a single-component simulation.\n\nFields\n\nRe::Array{Float64, 2}: The real part of the density modes.\nIm::Array{Float64, 2}: The imaginary part of the density modes.\n\n\n\n\n\n","category":"type"},{"location":"#SimulationAnalysis.SingleComponentSimulation","page":"Home","title":"SimulationAnalysis.SingleComponentSimulation","text":"SingleComponentSimulation\n\nA struct to hold the data of a single-component simulation.\n\nFields\n\nN::Int64: Number of particles.\nNdims::Int64: Number of dimensions.\nr_array::Array{Float64, 3}: Particle positions.\nv_array::Array{Float64, 3}: Particle velocities.\nF_array::Array{Float64, 3}: Particle forces.\nD_array::Array{Float64, 1}: Diffusion coefficient.\nt_array::Array{Float64, 1}: Time steps.\nbox_sizes::Vector{Float64}: Box sizes.\ndt_array::Array{Int64, 1}: Time step differences.\nt1_t2_pair_array::Vector{Array{Int64, 2}}: Time pairs.\nfilepath::String: Path to the simulation file.\n\n\n\n\n\n","category":"type"},{"location":"#SimulationAnalysis._find_density_modes!-NTuple{4, Any}","page":"Home","title":"SimulationAnalysis._find_density_modes!","text":"_find_density_modes!(Reρ, Imρ, r, kspace)\n\nCalculate the density modes for a given simulation r and wave vector space kspace.\n\nReρ and Imρ arrays are preallocated arrays with size (N_timesteps, Nk) for each species of the simulation.\n\nArguments\n\nReρ: preallocated array to store the real part of the density modes.\nImρ: preallocated array to store the imaginary part of the density modes.\nr: array containing the positions of the particles at each time step. It has shape (Ndim, N, Ntimesteps), where            Ndim is the number of dimensions, N is the number of particles and Ntimesteps is the number of time steps.\nkspace: the wave vector space used to calculate the density modes.\n\nReturns\n\nNothing: The Reρ and Imρ arrays are updated in-place.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.calculate_forces!-Tuple{Any, Bool}","page":"Home","title":"SimulationAnalysis.calculate_forces!","text":"calculate_forces!(s, forcestype::Bool)\n\nCalculate the forces for a simulation.\n\nThis is a placeholder function that throws an error if forcestype is true.\n\nArguments\n\ns: The simulation object.\nforcestype::Bool: Whether to calculate forces.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.calculate_forces!-Tuple{Any, SimulationAnalysis.KAWCA}","page":"Home","title":"SimulationAnalysis.calculate_forces!","text":"calculate_forces!(s, U::KAWCA; cutoff=2.0^(1.0/6.0))\n\nRecalculates the total force on all particles in a multi-component simulation 's' according to the Kob-Andersen Weeks-Chandler-Andersen system U,  and updates the force array in 's' with the calculated values. \n\nArguments\n\ns: a MultiComponentSimulation object that contains the position and force arrays for each particle.\nU::KAWCA: the interaction type.\ncutoff: the cutoff distance for the potential energy function. Default is 2.0^(1.0/6.0).\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.construct_k_space-Tuple{SimulationAnalysis.Simulation, Any}","page":"Home","title":"SimulationAnalysis.construct_k_space","text":"construct_k_space(s::Simulation, bounds; kfactor=1, negative=false, rectangular=false)\n\nConstruct the k-space of a simulation.\n\nArguments\n\ns::Simulation: The simulation object.\nbounds: The bounds of the k-space.\nkfactor=1: The k-factor.\nnegative=false: Whether to include negative k-vectors.\nrectangular=false: Whether to use a rectangular k-space.\n\nReturns\n\nA KSpace object.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.find_allowed_t1_t2_pair_array_log_multstarts-Tuple{Any, Any}","page":"Home","title":"SimulationAnalysis.find_allowed_t1_t2_pair_array_log_multstarts","text":"find_allowed_t1_t2_pair_array_log_multstarts(t_array, N_starts)\n\nFind allowed time pairs for a logarithmic time array with multiple starts.\n\nArguments\n\nt_array: The time array.\nN_starts: The number of starting points.\n\nReturns\n\nA tuple containing the dt_array and t1_t2_pair_array.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.find_allowed_t1_t2_pair_array_quasilog-Tuple{Any}","page":"Home","title":"SimulationAnalysis.find_allowed_t1_t2_pair_array_quasilog","text":"find_allowed_t1_t2_pair_array_quasilog(t_array; doublefactor=150)\n\nFind allowed time pairs for a quasi-logarithmic time array.\n\nArguments\n\nt_array: The time array.\ndoublefactor=150: The factor by which to double the time step.\n\nReturns\n\nA tuple containing the dt_array and t1_t2_pair_array.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.find_correlation_function!-NTuple{5, Any}","page":"Home","title":"SimulationAnalysis.find_correlation_function!","text":"find_correlation_function!(AB, A, B, kspace::KSpace, dt_array, t1_t2_pair_array)\n\nComputes the correlation function between two lists of observables. The observables are assumed to be complex-valued. The correlation function is a complex number. The correlation function is averaged over the first dimension of A and B, a given set of time differences, and a given set of pairs of times. The correlation function is computed for each time difference and is stored in the array AB.\n\nArguments\n\nAB::Array{Complex{Float64}, 1}: The array where the correlation function is stored.\nA::Array{Complex{Float64}, 2}: The first list of observables. The first index is the wavevector index and the second index is the time index.\nB::Array{Complex{Float64}, 2}: The second list of observables.\ndt_array::Array{Float64, 1}: The array of time differences.\nt1_t2_pair_array::Array{Array{Int64, 2}, 1}: The array of pairs of times. Each element of the array is a matrix with two columns. Each row of the matrix contains the indices of the times t1 and t2 for which the correlation function is computed.\n\nReturns\n\nNothing: The correlation function is stored in the array AB.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.find_correlation_function-Tuple{Any, Any, Any}","page":"Home","title":"SimulationAnalysis.find_correlation_function","text":"find_correlation_function(A, B, s)\n\nComputes the correlation function between two lists of observables. The observables are assumed to be complex-valued. The correlation function is a complex number. The correlation function is averaged over the first dimension of A and B.\n\nArguments\n\nA::Array{Complex{Float64}, 2}: The first list of observables.\nB::Array{Complex{Float64}, 2}: The second list of observables.\ns::Simulation: The simulation.\n\nReturns\n\nC::Array{Complex{Float64}, 1}: The correlation function.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.find_correlation_matrix-Tuple{Any, Any, SimulationAnalysis.Simulation}","page":"Home","title":"SimulationAnalysis.find_correlation_matrix","text":"find_correlation_matrix(observables_list1, observables_list2, kspace, s)\n\nComputes the correlation matrix between two lists of observables. The observables are assumed to be complex-valued. The correlation matrix is a matrix of complex numbers.\n\nArguments\n\nobservables_list1::Array{Array{Complex{Float64}, 2}, 1}: The first list of observables.\nobservables_list2::Array{Array{Complex{Float64}, 2}, 1}: The second list of observables.\ns::Simulation: The simulation.\n\nReturns\n\nmatrix::Array{Array{Complex{Float64}, 1}, 2}: The correlation matrix.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.find_density_modes-Tuple{SimulationAnalysis.MultiComponentSimulation, SimulationAnalysis.KSpace}","page":"Home","title":"SimulationAnalysis.find_density_modes","text":"find_density_modes(s::MultiComponentSimulation, kspace::KSpace; verbose=true)\n\nCalculates the density modes for a multi-component simulation.\n\nArguments\n\ns::MultiComponentSimulation: The simulation.\nkspace::KSpace: The k-space.\nverbose::Bool=true: Whether to print verbose output.\n\nReturns\n\nMultiComponentDensityModes: The density modes.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.find_density_modes-Tuple{SimulationAnalysis.SingleComponentSimulation, SimulationAnalysis.KSpace}","page":"Home","title":"SimulationAnalysis.find_density_modes","text":"find_density_modes(s::SingleComponentSimulation, kspace::KSpace; verbose=true)\n\nCalculates the density modes for a single-component simulation.\n\nArguments\n\ns::SingleComponentSimulation: The simulation.\nkspace::KSpace: The k-space.\nverbose::Bool=true: Whether to print verbose output.\n\nReturns\n\nSingleComponentDensityModes: The density modes.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.find_diagonal_four_point_k_vector_set-NTuple{4, Any}","page":"Home","title":"SimulationAnalysis.find_diagonal_four_point_k_vector_set","text":"find_diagonal_four_point_k_vector_set(kspace::KSpace3D, k1_bounds, k2_bounds, cosθ_bounds)    \n\nFinds the set of k vectors that satisfy the conditions given for k1, k2 and cosθ12.\nThese are specified in 2-Tuples.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.find_k_array-Tuple{Any, Any, Any}","page":"Home","title":"SimulationAnalysis.find_k_array","text":"find_k_array(bounds, box_sizes, dims; kfactor=1, rectangular=false, negative=false)\n\nFind the k-vectors in a given k-space.\n\nArguments\n\nbounds: The bounds of the k-space.\nbox_sizes: The box sizes.\ndims: The number of dimensions.\nkfactor=1: The k-factor.\nrectangular=false: Whether to use a rectangular k-space.\nnegative=false: Whether to include negative k-vectors.\n\nReturns\n\nA tuple containing the k_lengths, k_array, and cartesian_to_linear.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.find_k_array_2D-Tuple{Any, Any}","page":"Home","title":"SimulationAnalysis.find_k_array_2D","text":"find_k_array_2D(bounds, box_sizes; kfactor=1, rectangular=false, negative=false)\n\nFind the k-vectors in a 2D k-space.\n\nArguments\n\nbounds: The bounds of the k-space.\nbox_sizes: The box sizes.\nkfactor=1: The k-factor.\nrectangular=false: Whether to use a rectangular k-space.\nnegative=false: Whether to include negative k-vectors.\n\nReturns\n\nA tuple containing the k_lengths, k_array, and cartesian_to_linear.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.find_k_array_3D-Tuple{Any, Any}","page":"Home","title":"SimulationAnalysis.find_k_array_3D","text":"find_k_array_3D(bounds, box_sizes; kfactor=1, rectangular=false, negative=false)\n\nFind the k-vectors in a 3D k-space.\n\nArguments\n\nbounds: The bounds of the k-space.\nbox_sizes: The box sizes.\nkfactor=1: The k-factor.\nrectangular=false: Whether to use a rectangular k-space.\nnegative=false: Whether to include negative k-vectors.\n\nReturns\n\nA tuple containing the k_lengths, k_array, and cartesian_to_linear.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.find_log_time_array_multiple_starts-Tuple{Any, Any, Any}","page":"Home","title":"SimulationAnalysis.find_log_time_array_multiple_starts","text":"find_log_time_array_multiple_starts(log_factor, N_starts, N_max)\n\nCreate a logarithmic time array with multiple starts.\n\nArguments\n\nlog_factor: The logarithmic factor.\nN_starts: The number of starting points.\nN_max: The maximum number of steps.\n\nReturns\n\nA logarithmic time array with multiple starts.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.find_mean_squared_displacement-Tuple{Any, Any, Any}","page":"Home","title":"SimulationAnalysis.find_mean_squared_displacement","text":"Calculates the mean squared displacement from the t1, t2 pairs.  Returns:     An array contaning the mean squared displacement     An array contaning the mean squared displacement per particle\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.find_mobile_clusters-Tuple{Set{Int64}, Any}","page":"Home","title":"SimulationAnalysis.find_mobile_clusters","text":"find_mobile_clusters(mobile_particles, neighbourlists)\n\nFind clusters of mobile particles in a system. A cluster is defined as a set of particles that are connected by a bond. The function returns a vector of sets, where each set contains the indices of the particles in a cluster.\n\nArguments\n\nmobile_particles::Set{Int}: The indices of the mobile particles. \nneighbourlists::Vector{Vector{Int}}: The neighbourlists of the particles.\n\nReturns\n\nclusters::Vector{Set{Int}}: The clusters of mobile particles.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.find_original_trajectories-Tuple{Any, Any}","page":"Home","title":"SimulationAnalysis.find_original_trajectories","text":"find_original_trajectories(r, box_sizes)\n\nReconstruct the original trajectories from the remapped ones.\n\nArguments\n\nr: The remapped trajectories.\nbox_sizes: The box sizes.\n\nReturns\n\nThe original trajectories.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.find_quasilog_time_array-Tuple{Any}","page":"Home","title":"SimulationAnalysis.find_quasilog_time_array","text":"find_quasilog_time_array(maxsteps; doublefactor=10)\n\nCreate a quasi-logarithmic time array.\n\nArguments\n\nmaxsteps: The maximum number of steps.\ndoublefactor=10: The factor by which to double the time step.\n\nReturns\n\nA quasi-logarithmic time array.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.find_structure_factor-Tuple{SimulationAnalysis.MultiComponentSimulation, SimulationAnalysis.KSpace, SimulationAnalysis.MultiComponentDensityModes}","page":"Home","title":"SimulationAnalysis.find_structure_factor","text":"Documentation for function findstructurefactor:\n\nThis function computes the static structure factor for a given simulation s using the density modes in ρkt and the k-space information in kspace. The structure factor is calculated separately for each species combination.\n\nArguments:\n\ns: A MultiComponentSimulation object representing the simulation data.\nkspace: A KSpace object containing information about the k-space grid.\nρkt: A MultiComponentDensityModes object representing the Fourier transform of the density fields for each species.\nkmin: The minimum k value to include in the calculation. Default value is 0.0.\nkmax: The maximum k value to include in the calculation. Default value is 10^10.\n\nReturns:\n\nSk: A square matrix of size Nspecies x Nspecies representing the static structure factor. Sk[i, j] represents the structure factor for species i and j.\n\nThe function iterates over all possible species combinations (α, β), and calls the realstaticcorrelation_function  function to calculate the structure factor for each combination. The result is stored in the Sk matrix.  The function then returns Sk normalized by the total number of particles in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.find_voronoi_neighborlists-Tuple{Any}","page":"Home","title":"SimulationAnalysis.find_voronoi_neighborlists","text":"find_neighborlists_voronoi(s::Simulation; max_distance_from_boundary=3.0) where Ndims\n\nComputes the Voronoi neighborlists for a simulation.\n\nArguments\n\ns::Simulation: The simulation.\nmax_distance_from_boundary::Float64: The maximum distance from the boundary to take periodic images into account.\n\nReturns\n\nneighbourlists::Vector{Vector{Vector{Int}}}: The Voronoi neighborlists.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.read_Brownian_KALJ_simulation-Tuple{Any, Any}","page":"Home","title":"SimulationAnalysis.read_Brownian_KALJ_simulation","text":"read_Brownian_KALJ_simulation(filenamefull, dt; maxt=-1, every=1, original=false, forces=true)\n\nRead a Brownian simulation of a Kob-Andersen Lennard-Jones mixture. The file was generated with LAMMPS.  The columns in the data file correspond to the following:\n\nAtom ID\nAtom type\nx position\ny position\nz position\n\nArguments\n\nfilenamefull::String: Path to the simulation file.\ndt::Float64: Time step.\nmaxt::Int=-1: Maximum number of time steps to read.\nevery::Int=1: Read every every-th time step.\noriginal::Bool=false: Whether to reconstruct the original trajectories.\nforces::Bool=true: Whether to compute forces.\n\nReturns\n\nMultiComponentSimulation: A MultiComponentSimulation object.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.read_Brownian_KAWCA_simulation-Tuple{Any, Any}","page":"Home","title":"SimulationAnalysis.read_Brownian_KAWCA_simulation","text":"read_Brownian_KAWCA_simulation(filenamefull, dt; maxt=-1, every=1, original=false, forces=true)\n\nRead a Brownian simulation of a Kob-Andersen WCA mixture. The file was generated with LAMMPS.  The columns in the data file correspond to the following:\n\nAtom ID\nAtom type\nx position\ny position\nz position\n\nArguments\n\nfilenamefull::String: Path to the simulation file.\ndt::Float64: Time step.\nmaxt::Int=-1: Maximum number of time steps to read.\nevery::Int=1: Read every every-th time step.\noriginal::Bool=false: Whether to reconstruct the original trajectories.\nforces::Bool=true: Whether to compute forces.\n\nReturns\n\nMultiComponentSimulation: A MultiComponentSimulation object.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.read_Newtonian_KAWCA_simulation-Tuple{Any, Any}","page":"Home","title":"SimulationAnalysis.read_Newtonian_KAWCA_simulation","text":"read_Newtonian_KAWCA_simulation(filenamefull, dt; maxt=-1, every=1, original=false)\n\nRead a Newtonian simulation of a Kob-Andersen WCA mixture. The file was generated with LAMMPS.  The columns in the data file correspond to the following:\n\nAtom ID\nAtom type\nx position\ny position\nz position\nx velocities\ny velocities\nz velocities\n\nArguments\n\nfilenamefull::String: Path to the simulation file.\ndt::Float64: Time step.\nmaxt::Int=-1: Maximum number of time steps to read.\nevery::Int=1: Read every every-th time step.\noriginal::Bool=false: Whether to reconstruct the original trajectories.\n\nReturns\n\nMultiComponentSimulation: A MultiComponentSimulation object.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.read_WCA_simulation-Tuple{Any, Any}","page":"Home","title":"SimulationAnalysis.read_WCA_simulation","text":"read_WCA_simulation(filenamefull, dt; maxt=-1, every=1, original=false)\n\nRead a simulation of WCA particles done with LAMMPS. in the data file, the columns correspond to the following:\n\nAtom ID\nx position\ny position\nz position\nx force\ny force\nz force\n\nArguments\n\nfilenamefull::String: Path to the simulation file.\ndt::Float64: Time step.\nmaxt::Int=-1: Maximum number of time steps to read.\nevery::Int=1: Read every every-th time step.\noriginal::Bool=false: Whether to reconstruct the original trajectories.\n\nReturns\n\nSingleComponentSimulation: A SingleComponentSimulation object.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.read_continuously_hard_sphere_simulation-Tuple{Any}","page":"Home","title":"SimulationAnalysis.read_continuously_hard_sphere_simulation","text":"read_continuously_hard_sphere_simulation(filename; original=false, velocities=false, forcestype=false, time_origins=\"quasilog\")\n\nRead a simulation of continuously polydisperse particles. The file was generated with SimulationCode.jl.\n\nArguments\n\nfilename::String: Path to the simulation file.\noriginal::Bool=false: Whether to reconstruct the original trajectories.\nvelocities::Bool=false: Whether to read velocities.\nforcestype=false: Type of forces to compute.\ntime_origins=\"quasilog\": How to select the time origins.\n\nReturns\n\nSingleComponentSimulation: A SingleComponentSimulation object.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.read_monodisperse_hard_sphere_simulation-Tuple{Any}","page":"Home","title":"SimulationAnalysis.read_monodisperse_hard_sphere_simulation","text":"read_monodisperse_hard_sphere_simulation(filename; original=false, velocities=false, forcestype=false, dtarr=true)\n\nRead a simulation of monodisperse particles. The file was generated with SimulationCode.jl.\n\nArguments\n\nfilename::String: Path to the simulation file.\noriginal::Bool=false: Whether to reconstruct the original trajectories.\nvelocities::Bool=false: Whether to read velocities.\nforcestype=false: Type of forces to compute.\ndtarr::Bool=true: Whether to compute the time step array.\n\nReturns\n\nSingleComponentSimulation: A SingleComponentSimulation object.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.real_correlation_function!-Tuple{Any, Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, SimulationAnalysis.KSpace, Vararg{Any, 4}}","page":"Home","title":"SimulationAnalysis.real_correlation_function!","text":"real_correlation_function!(C, ReA, ImA, ReB, ImB, kspace, dt_array, t1_t2_pair_array, kmin, kmax)\n\nComputes the real part of the correlation function between two lists of observables. The observables are assumed to be complex-valued. The correlation function is computed for a given k-space, a given set of time differences, and a given set of pairs of times. The correlation function is computed for each time difference and is stored in the array C.\n\nArguments\n\nC::Array{Float64, 1}: The array where the correlation function is stored.\nReA::Array{Float64, 2}: The real part of the first list of observables. The first index is the time index and the second index is the wavevector index.\nImA::Array{Float64, 2}: The imaginary part of the first list of observables.\nReB::Array{Float64, 2}: The real part of the second list of observables.\nImB::Array{Float64, 2}: The imaginary part of the second list of observables.\nkspace::KSpace: The k-space.\ndt_array::Array{Float64, 1}: The array of time differences.\nt1_t2_pair_array::Array{Array{Int64, 2}, 1}: The array of pairs of times. Each element of the array is a matrix with two columns. Each row of the matrix contains the indices of the times t1 and t2 for which the correlation function is computed.\nkmin::Float64: The minimum value of the wavevector.\nkmax::Float64: The maximum value of the wavevector.\n\nReturns\n\nNothing: The correlation function is stored in the array C.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.real_static_correlation_function-Tuple{Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, SimulationAnalysis.KSpace, Any, Any}","page":"Home","title":"SimulationAnalysis.real_static_correlation_function","text":"real_static_correlation_function(ReA::Array{Float64, 2}, ImA::Array{Float64, 2}, ReB::Array{Float64, 2}, ImB::Array{Float64, 2}, kspace::KSpace, kmin, kmax)\n\nComputes the real-valued static correlation function between two lists of observables. The observables are assumed to be complex-valued. The correlation function is a real number.\n\nArguments\n\nReA::Array{Float64, 2}: The real part of the first list of observables.\nImA::Array{Float64, 2}: The imaginary part of the first list of observables.\nReB::Array{Float64, 2}: The real part of the second list of observables.\nImB::Array{Float64, 2}: The imaginary part of the second list of observables.\nkspace::KSpace: The k-space.\nkmin::Float64: The minimum value of the wavevector.\nkmax::Float64: The maximum value of the wavevector.\n\nReturns\n\nC::Float64: The correlation function.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.remap_positions!-Tuple{Array{Float64, 3}, Any}","page":"Home","title":"SimulationAnalysis.remap_positions!","text":"remap_positions!(r::Array{Float64,3}, box_sizes)\n\nRemap the positions to be inside the box.\n\nArguments\n\nr::Array{Float64,3}: The particle positions.\nbox_sizes: The box sizes.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.reshape_data-Tuple{Vector{Matrix{Float64}}}","page":"Home","title":"SimulationAnalysis.reshape_data","text":"reshape_data(r::Array{Array{Float64,2},1})\n\nReshape the data from a vector of 2D arrays to a 3D array.\n\nArguments\n\nr::Array{Array{Float64,2},1}: A vector of 2D arrays.\n\nReturns\n\nArray{Float64,3}: A 3D array.\n\n\n\n\n\n","category":"method"},{"location":"#SimulationAnalysis.separate_trajectories-Tuple{Any, Any}","page":"Home","title":"SimulationAnalysis.separate_trajectories","text":"separate_trajectories(r, type_list)\n\nSeparate the trajectories of different species.\n\nArguments\n\nr: The trajectories.\ntype_list: A list of particle types.\n\nReturns\n\nA vector of trajectories, one for each species.\n\n\n\n\n\n","category":"method"}]
}
